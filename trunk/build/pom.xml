<?xml version="1.0" encoding="UTF-8"?>

<project xmlns="http://maven.apache.org/POM/4.0.0"
		xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
		xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>

	<name>ows-service-framework</name>
	<groupId>org.vast</groupId>
	<artifactId>ows-service-framework</artifactId>
	<version>0.2.1-SNAPSHOT</version>
	<packaging>jar</packaging>

	<dependencies>
		<dependency>
			<groupId>org.vast</groupId>
			<artifactId>swe-common-data-framework</artifactId>
			<version>0.8.3-SNAPSHOT</version>
		</dependency>
		<dependency>
			<groupId>xerces</groupId>
			<artifactId>xercesImpl</artifactId>
			<version>2.9.1</version>
			<scope>compile</scope>
			<exclusions>
				<!-- JDK has the APIs built-in now. -->
				<exclusion>
					<groupId>xml-apis</groupId>
					<artifactId>xml-apis</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<!--
			log4j is an ugly dependency to write.  It has a number of optional
			dependencies that we don't use, so we have to manually tell Maven
			not to inherit them as transitive dependencies.
		-->
		<dependency>
			<groupId>log4j</groupId>
			<artifactId>log4j</artifactId>
			<version>1.2.15</version>
			<!-- log4j has many optional dependencies that we don't need -->
			<exclusions>
				<exclusion>
					<groupId>com.sun.jdmk</groupId>
					<artifactId>jmxtools</artifactId>
				</exclusion>
				<exclusion>
					<groupId>com.sun.jmx</groupId>
					<artifactId>jmxri</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.jms</groupId>
					<artifactId>jms</artifactId>
				</exclusion>
				<exclusion>
					<groupId>javax.mail</groupId>
					<artifactId>mail</artifactId>
				</exclusion>
				<!-- exclude log4j's (old) junit dependency so we get the version we want -->
				<exclusion>
					<groupId>junit</groupId>
					<artifactId>junit</artifactId>
				</exclusion>
				<exclusion>
					<groupId>oro</groupId>
					<artifactId>oro</artifactId>
				</exclusion>
			</exclusions>
		</dependency>
		<dependency>
			<groupId>javax.servlet</groupId>
			<artifactId>servlet-api</artifactId>
			<version>2.5</version>
			<scope>provided</scope>
		</dependency>
	</dependencies>

	<repositories>
		<!-- The servlet API jar isn't in the standard Maven repository. -->
		<repository>
			<id>dev-java-net-maven1</id>
			<url>http://download.java.net/maven/1/</url>
			<layout>legacy</layout>
		</repository>
	</repositories>

	<build>
		<!-- Where to put output of the build -->
		<directory>../target</directory>
		<!-- Where to find source files -->
		<sourceDirectory>../src</sourceDirectory>
		<!-- Where to find test source files -->
		<testSourceDirectory>../test</testSourceDirectory>
		<!-- Everything in ../src that isn't ".java" goes in the jar -->
		<resources>
			<resource>
				<directory>../src</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
				<filtering>false</filtering>
			</resource>
		</resources>
		<!-- Everything in ../test that isn't ".java" is in classpath when running tests -->
		<testResources>
			<testResource>
				<directory>../test</directory>
				<includes>
					<include>**/*.*</include>
				</includes>
				<excludes>
					<exclude>**/*.java</exclude>
				</excludes>
				<filtering>false</filtering>
			</testResource>
		</testResources>

		<plugins>
			<!-- Tell the compiler this is 1.5 source code. -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<configuration>
					<source>1.5</source>
					<target>1.5</target>
				</configuration>
			</plugin>
		</plugins>
	</build>
</project>
